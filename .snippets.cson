'*':
  'Riot input hello':
    'prefix': 'riotinput'
    'body': """
    <input name="helloInput" placeholder="Enter your name">
    """
  'Riot button':
    'prefix': 'riotbutton'
    'body': """
    <button class="btn btn-success" onclick="{ sayHello }">{opts.title}</button>
    """
  'Riot messages count':
    'prefix': 'riotmessagescount'
    'body': """
    <h4># {messages.length} messages</h4>
    """
  'Riot messages iter':
    'prefix': 'riotmessagesiter'
    'body': """
    <ul>
      <li each={ message in messages }>
        { message }
      </li>
    </ul>
    """
  'Riot message if':
    'prefix': 'riotmessageif'
    'body': """
    <span if={message === 'Hello Mr Spock'}>. Long live and prosper.</span>
    """
  'Riot this messages':
    'prefix': 'riotmessagethis'
    'body': """
    this.messages = []
    """
  'Riot sayHello':
    'prefix': 'riotsayhello'
    'body': """
    this.sayHello = (e) => {
      this.messages.push('Hello ' + (this.helloInput.value))
    }
    """
  'Riot hasMessage':
    'prefix': 'riothasmessage'
    'body': """
    this.hasMessages = function() {
      return this.messages.length > 0
    }
    """
  'Riot show message':
    'prefix': 'riotshowmessage'
    'body': """
    <h4 show = { hasMessages() }># {messages.length} messages</h4>
    """
  'Riot class css':
    'prefix': 'riotclasscss'
    'body': """
    <li each={ message, i in messages } class={ bg-success : i%2 === 0 }>
    """
  'Riot bus mount':
    'prefix': 'riotmountbus'
    'body': """
    riot.mount('hello-world', { title: 'Hello', bus: bus });
    """
  'Riot bus sayhello':
    'prefix': 'riotsayhellobus'
    'body': """
     this.sayHello = (e) => {
       this.opts.bus.trigger('newMsgEvent', 'Hello ' + (this.helloInput.value))
     }
    """
  'Riot messages count include':
    'prefix': 'riotmessagescounttaginclude'
    'body': """
     <messages-count bus = { opts.bus }></messages-count>
    """
  'Riot messages count':
    'prefix': 'riotmessagescounttag'
    'body': """
     <messages-count>
       <h4 show = { hasMessages() }># {count} messages</h4>

      var self = this
      this.count = 0

      this.opts.bus.on('newMsgEvent', function(msg) {
        self.count = self.count + 1
      })

      this.hasMessages = function() {
        return this.count > 0
      }
     </messages-count>
    """
  'Riot messages list include':
    'prefix': 'riotmessageslisttaginclude'
    'body': """
     <messages-list bus = { opts.bus }></messages-list>
    """
  'Riot messages list':
    'prefix': 'riotmessageslisttag'
    'body': """
     <messages-list>
       <ul>
         <li each={ message, i in messages } class={ bg-success : i%2 === 0 }>
           { message }<span if={message === 'Hello Mr Spock'}>. Long live and prosper.</span>
         </li>
       </ul>

       var self = this
       this.messages = []

       this.opts.bus.on('newMsgEvent', function(msg) {
         self.messages.push(msg)
       })
     </messages-list>
    """
  'Riot eventbus mixin':
    'prefix': 'rioteventbusmixin'
    'body': """
      var EventBusMixin = {
        bus: riot.observable()
      };
    """
  'Riot this eventbus mixin':
    'prefix': 'rioteventbusmixinthis'
    'body': """
      this.mixin(EventBusMixin)
    """
